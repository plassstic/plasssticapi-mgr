package handler

import (
	"context"
	"fmt"

	tg "github.com/go-telegram/bot"
	tgm "github.com/go-telegram/bot/models"
	. "plassstic.tech/gopkg/plassstic-mgr/internal/depend/logger"
	. "plassstic.tech/gopkg/plassstic-mgr/internal/logic/bot"
	. "plassstic.tech/gopkg/plassstic-mgr/internal/logic/bot/handler/state"
	. "plassstic.tech/gopkg/plassstic-mgr/internal/logic/bot/utils"
	. "plassstic.tech/gopkg/plassstic-mgr/internal/service"
	"plassstic.tech/gopkg/plassstic-mgr/lib/ent"
	"plassstic.tech/gopkg/plassstic-mgr/lib/fsm"
)

type profile struct {
	client *ent.Client
}

func profileHandlers(client *ent.Client) []*TelegramHandler {
	p := &profile{
		client: client,
	}

	p.setProfileCallbacks()

	return []*TelegramHandler{
		{
			Handler: p.handleMenu,
			Match:   CQExact("settings"),
		},
		{
			Handler: p.handleToken,
			Match:   CQExact("add_bot"),
		},
	}
}

func (p *profile) setProfileCallbacks() {
	GlobalFSM.AddCallbacks(map[fsm.StateID]fsm.Callback{
		ProfileNewTokenState: func(ctx context.Context, b *tg.Bot, update *tgm.Update) {
			return
		},
		ProfileNewMessageState: p.handleMessage,
		ProfileChangeMessageState: func(ctx context.Context, b *tg.Bot, update *tgm.Update) {
			return
		},
	})
}

func (p *profile) handleMenu(ctx context.Context, b *tg.Bot, u *tgm.Update) {
	var text string
	var kb *tgm.InlineKeyboardMarkup

	info := UIFromUpdate(u)
	user, err := (&UserService{}).
		With(p.client).
		Get(int(info.User.ID)).
		One()

	if err != nil {
		GetLogger("profile.handleMenu").Panicf("panic! %e", err)
	}

	text = "üõ† –ù–∞—Å—Ç—Ä–æ–π–∫–∏"

	if user.Bot.Token == "" {
		kb = &tgm.InlineKeyboardMarkup{
			InlineKeyboard: [][]tgm.InlineKeyboardButton{
				{
					{Text: "ü§ñ –î–æ–±–∞–≤–∏—Ç—å –±–æ—Ç–∞", CallbackData: "add_bot"},
				},
				{
					{Text: "üîô –ù–∞–∑–∞–¥", CallbackData: "start_menu"},
				},
			},
		}
	} else {
		text += "\n\n" + fmt.Sprintf("–ö –≤–∞—à–µ–º—É –∞–∫–∫–∞—É–Ω—Ç—É –ø–æ–¥–∫–ª—é—á–µ–Ω –±–æ—Ç @%s", user.Bot.Handle)
		kb = &tgm.InlineKeyboardMarkup{
			InlineKeyboard: [][]tgm.InlineKeyboardButton{
				{
					{Text: "ü§ñ –û—á–∏—Å—Ç–∏—Ç—å", CallbackData: "clear"},
				},
				{
					{Text: "üîô –ù–∞–∑–∞–¥", CallbackData: "start_menu"},
				},
			},
		}
	} // TODO(plassstic): –í—ã–Ω–µ—Å—Ç–∏ –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã –≤ –æ—Ç–¥ —É—Ç–∏–ª–∏—Ç—É

	info.Respond(ctx, b, text, kb)
}

func (p *profile) handleToken(ctx context.Context, b *tg.Bot, u *tgm.Update) {
	var text string

	info := UIFromUpdate(u)

	text = "–í–≤–µ–¥–∏—Ç–µ BOT_TOKEN –¥–ª—è –±–æ—Ç–∞ —Å –Ω–∞–∑–Ω–∞—á–µ–Ω–Ω—ã–º–∏ –ø—Ä–∞–≤–∞–º–∏ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞ –≤ —Ü–µ–ª–µ–≤–æ–º –∫–∞–Ω–∞–ª–µ:\n\n<i>–ü–æ–¥—Å–∫–∞–∑–∫–∞: –°–æ–∑–¥–∞—Ç—å –±–æ—Ç–∞ –º–æ–∂–Ω–æ —á–µ—Ä–µ–∑ @botfather, –æ—Ç–ø—Ä–∞–≤–∏–≤ <b>–µ–º—É</b> –∫–æ–º–∞–Ω–¥—É <code>/newbot</code></i>"

	_ = GlobalFSM.Transition(ctx, info.User.ID, ProfileNewTokenState, b, u)

	info.Respond(ctx, b, text, NilMarkup)
}

func (p *profile) handleMessage(ctx context.Context, b *tg.Bot, u *tgm.Update) {
	var text string

	text = "–ü–µ—Ä–µ—à–ª–∏—Ç–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –∏–∑ –∫–∞–Ω–∞–ª–∞ —Å –±–æ—Ç–æ–º-–∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º, –∫–æ—Ç–æ—Ä–æ–µ –≤—ã —Ö–æ—Ç–∏—Ç–µ –≤—ã–¥–µ–ª–∏—Ç—å –ø–æ–¥ Spotify:"

	UIFromUpdate(u).Respond(ctx, b, text, NilMarkup)
}

func (p *profile) handleClear(ctx context.Context, b *tg.Bot, u *tgm.Update) {
	var text string

	info := UIFromUpdate(u)

	text = "–ü–µ—Ä–µ—à–ª–∏—Ç–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –∏–∑ –∫–∞–Ω–∞–ª–∞ —Å –±–æ—Ç–æ–º-–∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º, –∫–æ—Ç–æ—Ä–æ–µ –≤—ã —Ö–æ—Ç–∏—Ç–µ –≤—ã–¥–µ–ª–∏—Ç—å –ø–æ–¥ Spotify:"

	info.Respond(ctx, b, text, NilMarkup)
}
