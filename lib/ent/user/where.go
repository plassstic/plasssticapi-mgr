// Code generated by ent, DO NOT EDIT.

package user

import (
	"entgo.io/ent/dialect/sql"
	"plassstic.tech/gopkg/golang-manager/lib/ent/predicate"
)

// ID filters vertices based on their ID field.
func ID(id int) predicate.User {
	return predicate.User(sql.FieldEQ(FieldID, id))
}

// IDEQ applies the EQ predicate on the ID field.
func IDEQ(id int) predicate.User {
	return predicate.User(sql.FieldEQ(FieldID, id))
}

// IDNEQ applies the NEQ predicate on the ID field.
func IDNEQ(id int) predicate.User {
	return predicate.User(sql.FieldNEQ(FieldID, id))
}

// IDIn applies the In predicate on the ID field.
func IDIn(ids ...int) predicate.User {
	return predicate.User(sql.FieldIn(FieldID, ids...))
}

// IDNotIn applies the NotIn predicate on the ID field.
func IDNotIn(ids ...int) predicate.User {
	return predicate.User(sql.FieldNotIn(FieldID, ids...))
}

// IDGT applies the GT predicate on the ID field.
func IDGT(id int) predicate.User {
	return predicate.User(sql.FieldGT(FieldID, id))
}

// IDGTE applies the GTE predicate on the ID field.
func IDGTE(id int) predicate.User {
	return predicate.User(sql.FieldGTE(FieldID, id))
}

// IDLT applies the LT predicate on the ID field.
func IDLT(id int) predicate.User {
	return predicate.User(sql.FieldLT(FieldID, id))
}

// IDLTE applies the LTE predicate on the ID field.
func IDLTE(id int) predicate.User {
	return predicate.User(sql.FieldLTE(FieldID, id))
}

// BotToken applies equality check predicate on the "bot_token" field. It's identical to BotTokenEQ.
func BotToken(v string) predicate.User {
	return predicate.User(sql.FieldEQ(FieldBotToken, v))
}

// BotTokenEQ applies the EQ predicate on the "bot_token" field.
func BotTokenEQ(v string) predicate.User {
	return predicate.User(sql.FieldEQ(FieldBotToken, v))
}

// BotTokenNEQ applies the NEQ predicate on the "bot_token" field.
func BotTokenNEQ(v string) predicate.User {
	return predicate.User(sql.FieldNEQ(FieldBotToken, v))
}

// BotTokenIn applies the In predicate on the "bot_token" field.
func BotTokenIn(vs ...string) predicate.User {
	return predicate.User(sql.FieldIn(FieldBotToken, vs...))
}

// BotTokenNotIn applies the NotIn predicate on the "bot_token" field.
func BotTokenNotIn(vs ...string) predicate.User {
	return predicate.User(sql.FieldNotIn(FieldBotToken, vs...))
}

// BotTokenGT applies the GT predicate on the "bot_token" field.
func BotTokenGT(v string) predicate.User {
	return predicate.User(sql.FieldGT(FieldBotToken, v))
}

// BotTokenGTE applies the GTE predicate on the "bot_token" field.
func BotTokenGTE(v string) predicate.User {
	return predicate.User(sql.FieldGTE(FieldBotToken, v))
}

// BotTokenLT applies the LT predicate on the "bot_token" field.
func BotTokenLT(v string) predicate.User {
	return predicate.User(sql.FieldLT(FieldBotToken, v))
}

// BotTokenLTE applies the LTE predicate on the "bot_token" field.
func BotTokenLTE(v string) predicate.User {
	return predicate.User(sql.FieldLTE(FieldBotToken, v))
}

// BotTokenContains applies the Contains predicate on the "bot_token" field.
func BotTokenContains(v string) predicate.User {
	return predicate.User(sql.FieldContains(FieldBotToken, v))
}

// BotTokenHasPrefix applies the HasPrefix predicate on the "bot_token" field.
func BotTokenHasPrefix(v string) predicate.User {
	return predicate.User(sql.FieldHasPrefix(FieldBotToken, v))
}

// BotTokenHasSuffix applies the HasSuffix predicate on the "bot_token" field.
func BotTokenHasSuffix(v string) predicate.User {
	return predicate.User(sql.FieldHasSuffix(FieldBotToken, v))
}

// BotTokenIsNil applies the IsNil predicate on the "bot_token" field.
func BotTokenIsNil() predicate.User {
	return predicate.User(sql.FieldIsNull(FieldBotToken))
}

// BotTokenNotNil applies the NotNil predicate on the "bot_token" field.
func BotTokenNotNil() predicate.User {
	return predicate.User(sql.FieldNotNull(FieldBotToken))
}

// BotTokenEqualFold applies the EqualFold predicate on the "bot_token" field.
func BotTokenEqualFold(v string) predicate.User {
	return predicate.User(sql.FieldEqualFold(FieldBotToken, v))
}

// BotTokenContainsFold applies the ContainsFold predicate on the "bot_token" field.
func BotTokenContainsFold(v string) predicate.User {
	return predicate.User(sql.FieldContainsFold(FieldBotToken, v))
}

// EditableIsNil applies the IsNil predicate on the "editable" field.
func EditableIsNil() predicate.User {
	return predicate.User(sql.FieldIsNull(FieldEditable))
}

// EditableNotNil applies the NotNil predicate on the "editable" field.
func EditableNotNil() predicate.User {
	return predicate.User(sql.FieldNotNull(FieldEditable))
}

// And groups predicates with the AND operator between them.
func And(predicates ...predicate.User) predicate.User {
	return predicate.User(sql.AndPredicates(predicates...))
}

// Or groups predicates with the OR operator between them.
func Or(predicates ...predicate.User) predicate.User {
	return predicate.User(sql.OrPredicates(predicates...))
}

// Not applies the not operator on the given predicate.
func Not(p predicate.User) predicate.User {
	return predicate.User(sql.NotPredicates(p))
}
